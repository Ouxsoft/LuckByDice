name: CI

on:
  push:
    branches: [ main , release/* ]
  pull_request:
    branches: [ main ]

jobs:
  composer-validate:
    name: "Composer Validate ${{ matrix.php-version }}"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - '7.4'

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2

      - name: "Validate composer.json"
        run: "composer validate --strict --no-check-lock"

  php-cs-fixer:
    needs:
      - "composer-validate"

    name: "PHP-CS-Fixer (${{ matrix.php-version }})"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - '8.0'

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2

      - name: "Composer install"
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: "--no-scripts"

      - name: "Run friendsofphp/php-cs-fixer"
        run: composer run-script check-code-standards

  phpstan:
    needs:
      - "composer-validate"

    name: "PHPStan (${{ matrix.php-version }})"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - '7.4'

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2

      - name: "Composer install"
        uses: "ramsey/composer-install@v1"
        with:
          composer-options: "--no-scripts"

      - run: composer run-script analyze

  tests:
    name: "Tests PHP ${{ matrix.php-version }} + ${{ matrix.dependency }}"
    needs:
      - "composer-validate"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version:
          - '7.2'
          - '7.3'
          - '7.4'
          - '8.0'
        include:
          - php-version: '8.0'
            submit-coverage: 'yes'

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: PHP Info
        run: php --version

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - run: composer run-script test

      - run: composer run-script benchmark

      - name: Run LuckByDice bin test
        run: php ./bin/luckbydice 1d2,3d6*2+2 0

      - name: Submit code coverage
        if: matrix.submit-coverage == 'yes'
        run: bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }} -f tests/output/clover.xml

  docker-validate:
      - name: Get files changed
        id: changed-files
        uses: tj-actions/changed-files@v2.1

      - uses: actions/checkout@v2
        if: contains(steps.changed-files.outputs.modified_files, 'Dockerfile')

      - uses: hadolint/hadolint-action@v1.5.0
        if: contains(steps.changed-files.outputs.modified_files, 'Dockerfile')
        with:
          dockerfile: Dockerfile

  docker-hub:
    name: "Push to DockerHub"
    environment: CI
    needs:
      - "docker-validate"
      - "tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ouxsoft/luckbydice:latest
          target: standard


  notify-slack:
    name: Notify slack
    runs-on: ubuntu-latest
    steps:
      - name: "Post to the #LuckByDice channel"
        id: slack
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: '#luckbydice'
          slack-message: 'CI Build Init${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
